

The ideas of tidy data (Wickham, 2014) provide a standardized framework to organize and structure datasets, making them easy to manipulate, model and visualize.

Each variable forms a column;
Each observation forms a row;
Each type of observational unit forms a table (or dataframe).



The convenient select_dtypes method allows us to select variables (columns in our dataframe) by data type.

df.select_dtypes(include='object').head(3)



Convert string variables into category (nominal)

df.col = df.col.astype('category')


Convert string variables into category (ordinal)

df.col = df.col.astype('category')
ordered_cats = ['low', 'medium', 'high']
df.col = df.col.set_categories(ordered_cats, ordered=True)

or 

ordered_cats = ['low', 'medium', 'high']
df.col = pd.Categorical(df.col, ordered_cats, ordered=True)


Series.cat() : Accessor object for categorical properties of the Series values (like series.str.replace())


Series.cat.categories
Series.cat.ordered
Series.cat.codes




Introducing sklearn-like transformers

.fit()
.transform()

from sklearn.preprocessing import KBinsDiscretizer
from sklearn.preprocessing import Binarizer

from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import Normalizer
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import RobustScaler

Example for Binning

# initialize transformer with desired options
binner = KBinsDiscretizer(n_bins=10, encode='ordinal', strategy='uniform')

#The object passed to .fit() and .transform() must be 'numeric array-like, shape (n_samples, n_features)'
#Pandas series doesn't work because it has dimensions (n,) it must be converted to a Dataframe
#A numpy array with dimensions (n,d) with d>=1 will also be ok

X = df.col.to_frame()
# fit transformer to data
binner.fit(X)
# create new feature by transforming the data
df['col_bins'] = binner.transform(X)


Example for Binarization 

# initialize transformer with desired options
binner = Binarizer(threshold = 100)

X = df.col.to_frame()
# fit transformer to data
binner.fit(X)
# create new feature by transforming the data
df['col_bins'] = binner.transform(X)




3.2.1. Binary data

df['col'] = df.col.map({'MALE':1, 'FEMALE':0})



3.2.2. Enconding categorical features

import category_encoders as ce

Ordinal encoding

# initialize transformer with desired options
ordinalencoder = ce.ordinal.OrdinalEncoder()

X = df.col.to_frame()
# fit transformer to data
ordinalencoder.fit(X)
# create new feature by transforming the data
df['col_encoded'] = ordinalencoder.transform(X)
ordinalencoder.category_mapping


One-hot encoding
ohe = ce.one_hot.OneHotEncoder(use_cat_names=True, handle_unknown='indicator')

X = df.col.to_frame()
# fit transformer to data
ohe.fit(X)
# create new feature by transforming the data
df_ohe = ohe.transform(X)



The fields in this dataset have the following meaning:

time - 1 hour of time in the real world. Total 744 hours (30 days simulation).
type - CASH-IN, CASH-OUT, DEBIT, PAYMENT and TRANSFER.
risk - low, medium, high.
amount - amount of the transaction in local currency.
availableBalance - initial balance before the transaction.
nameOrig - customer who started the transaction.
nameDest - customer who is the recipient of the transaction.
isFraud - 










